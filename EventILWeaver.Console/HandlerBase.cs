using System;
using System.Collections.Generic;
using System.Linq;
using Mono.Cecil;

namespace EventILWeaver.Console
{
    public abstract class HandlerBase
    {
        protected static bool ExecuteWithOptionalRetry(Action execute)
        {
            bool retry;
            do
            {
                try
                {
                    execute();
                    retry = false;
                }
                catch (UnauthorizedAccessException e)
                {
                    System.Console.WriteLine(
                        "Unable to modify dll, make sure you run the application as administrator and close all applications that use library.");

                    System.Console.Write("\r\nRetry? [y]es, any other key for no\t: ");
                    var key = System.Console.ReadKey().Key;
                    System.Console.WriteLine();
                    if (key == ConsoleKey.Y)
                    {
                        retry = true;
                    }
                    else
                    {
                        return false;
                    }
                }
            } while (retry);

            return true;
        }

        protected static string CreateBackupFilePath(string dllPath)
        {
            return $@"{dllPath}.backup";
        }
        
        protected static List<TypeWithAutoGeneratedEvents> GetExistingTypesWithAutoGeneratedEvents(string targetDllPath, string ilWeavedAutoGeneratedEventAttributeName)
        {
            List<TypeWithAutoGeneratedEvents> existingTypesWithAutoGeneratedEvents;
            using (var assembly = AssemblyDefinition.ReadAssembly(targetDllPath, new ReaderParameters { ReadWrite = false }))
            {
                existingTypesWithAutoGeneratedEvents = assembly.MainModule.Types.Select(t =>
                    {
                        return new TypeWithAutoGeneratedEvents(t,
                            t.Events.Where(e => e.CustomAttributes.Any(ca =>
                                ca.AttributeType.Name == ilWeavedAutoGeneratedEventAttributeName)));
                    })
                    .Where(t => t.EventsWithAutoGeneratedAttribute.Any())
                    .ToList();
            }

            return existingTypesWithAutoGeneratedEvents;
        }
    }
}
