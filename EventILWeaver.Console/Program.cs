using System;
using CommandLine;
using EventILWeaver.Console.AddEvents;
using EventILWeaver.Console.GenerateHelperCode;
using EventILWeaver.Console.ListExistingAutoGeneratedEvents;
using EventILWeaver.Console.RevertToOriginal;
using EventILWeaver.Weaver;

namespace EventILWeaver.Console
{
    public class Program
    {
        static int Main(string[] args)
        {
            return Parser.Default.ParseArguments<AddEventsOptions, RevertToOriginalOptions, ListExistingAutoGeneratedEventsOptions, GenerateHelperCodeOptions>(args)
                .MapResult(
                    (AddEventsOptions opts) => RunHandlerCommon(() => new AddEventsHandler().Run(opts)),
                    (RevertToOriginalOptions opts) => RunHandlerCommon(() => new RevertToOriginalHandler().Run(opts)),
                    (ListExistingAutoGeneratedEventsOptions opts) => RunHandlerCommon(() => new ListExistingAutoGeneratedEventsHandler(IlEventGenerator.IlWeavedAutoGeneratedEventAttributeName).Run(opts)),
                    (GenerateHelperCodeOptions opts) => RunHandlerCommon(() => new GenerateHelperCodeHandler(IlEventGenerator.IlWeavedAutoGeneratedEventAttributeName).Run(opts)), 
                    errs => 1);
        }

        static int RunHandlerCommon(Func<int> runHandler)
        {
            var result = runHandler();
            EndWhenUserReady();
            return result;
        }

        private static void EndWhenUserReady()
        {
            System.Console.WriteLine("\r\n\r\nPress any key to exit...");
            System.Console.ReadKey();
        }
    }
}
